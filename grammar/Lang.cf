-- A program is defined as a (possibly empty) list of statements separated by semicolons,
-- followed by an expression which will be evaluated to produce an output.

entrypoints Program;

Program. Program ::= [Stmt] Exp0 ;

--This is the syntax from BNFC to define a list of statements
[].    [Stmt] ::= ;
(:).   [Stmt] ::= Stmt ";" [Stmt] ;
(:).   [Stmt] ::= Stmt1 [Stmt] ;

-- KEY-VALUE PAIRS ----------------------------------------------------

Param. Param ::= Ident ":" Type ;
[].  [Param] ::= ;
(:[]). [Param] ::= Param ;  
(:). [Param] ::= Param "," [Param] ;

-- TYPES --------------------------------------------------------------

TInt.   Type1 ::= "int";
TBool.  Type1 ::= "bool";
TVoid.  Type1 ::= "void";

_. Type2 ::= "(" Type ")";
_. Type1 ::= Type2;
_. Type  ::= Type1;

-- STATEMENTS ---------------------------------------------------------

SSet.       Stmt  ::= "set" Ident "=" Exp;
SLet.       Stmt  ::= "let" Ident "=" Exp ;
SMut.       Stmt  ::= "let" "mut" Ident "=" Exp ;
SApp.       Stmt  ::= "apply" Ident "(" [Exp] ")" ;

SIf.        Stmt1 ::= "if" Exp "{" [Stmt] Exp0 "}" ;
SIfElse.    Stmt1 ::= "if" Exp "{" [Stmt] Exp0 "}" "else" "{" [Stmt] Exp0 "}" ;
SWhile.     Stmt1 ::= "while" Exp "{" [Stmt] "}" ;
SFun.       Stmt1 ::= "fun" Ident "(" [Param] ")" "->" Type "=" "{" [Stmt] Exp0 "}" ;

-- EXPRESSIONS --------------------------------------------------------

[].  [Exp] ::= ;                      
(:[]). [Exp] ::= Exp ;                 
(:). [Exp] ::= Exp "," [Exp] ;     

-- Arithmetic
EInt. Exp7  ::= Integer;

EMul. Exp6  ::= Exp6 "*" Exp7;
EDiv. Exp6  ::= Exp6 "/" Exp7;
EAdd. Exp5  ::= Exp5 "+" Exp6;
ESub. Exp5  ::= Exp5 "-" Exp6;

-- Booleans
ETrue.  Exp3  ::= "True";
EFalse. Exp3  ::= "False";

ENot.   Exp3  ::= "!" Exp3;
EAnd.   Exp2  ::= Exp2 "&&" Exp3;
EOr.    Exp1  ::= Exp1 "||" Exp2;

-- Comparisons
EEq.  Exp  ::= Exp "==" Exp1;
ELt.  Exp4 ::= Exp4 "<" Exp5;
EGt.  Exp4 ::= Exp4 ">" Exp5;
ELeq. Exp4 ::= Exp4 "<=" Exp5;
EGeq. Exp4 ::= Exp4 ">=" Exp5;

-- Control flow
EIf.  Exp8 ::= "inif" Exp "then" Exp "else" Exp;

-- Let bindings
EVar. Exp8 ::= Ident;

EApp.   Exp8 ::= Ident "(" [Exp] ")" ;
EVoid.  Exp0 ::= ;

-- This part sets up the order of operation
_. Exp8 ::= "(" Exp ")" ;
_. Exp7 ::= Exp8 ;
_. Exp6 ::= Exp7 ;
_. Exp5 ::= Exp6 ;
_. Exp4 ::= Exp5 ;
_. Exp3 ::= Exp4 ;
_. Exp2 ::= Exp3 ;
_. Exp1 ::= Exp2 ;
_. Exp  ::= Exp1 ;
_. Exp0 ::= Exp ;